DEFINE_ACES_PARAM(Y_MIN: 0.0001,
                  Y_MID: 7.2,
                  Y_MAX: 108.0,
                  DISPLAY_PRI: { 0.68000, 0.32000, 0.26500, 0.69000, 0.15000, 0.06000, 0.31270, 0.32900 },
                  LIMITING_PRI: { 0.68000, 0.32000, 0.26500, 0.69000, 0.15000, 0.06000, 0.31270, 0.32900 },
                  EOTF: fwd_custom,
                  INVERSE_EOTF: bwd_custom,
                  SURROUND: 0,
                  STRETCH_BLACK: 1,
                  D60_SIM: 0,
                  LEGAL_RANGE: 0)

__DEVICE__ float3 fwd_custom(float3 p_InputCV, __CONSTANTREF__ AcesTransformUserSettingParams* p_AcesParams)
{
    const float3 yMin = to_float3(p_AcesParams->yMin, p_AcesParams->yMin, p_AcesParams->yMin);
    const float3 yMax = to_float3(p_AcesParams->yMax, p_AcesParams->yMax, p_AcesParams->yMax);
    const float3 outputCV = p_InputCV * (yMax - yMin) + yMin;
}

__DEVICE__ float3 bwd_custom(float3 p_InputCV, __CONSTANTREF__ AcesTransformUserSettingParams* p_AcesParams)
{
    const float3 yMin = to_float3(p_AcesParams->yMin, p_AcesParams->yMin, p_AcesParams->yMin);
    const float3 yMax = to_float3(p_AcesParams->yMax, p_AcesParams->yMax, p_AcesParams->yMax);
    const float3 outputCV = (p_InputCV - yMin) / (yMax - yMin);
    return outputCV;
}

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B)
{
    const float3 result = AcesInvOutputTransform(p_R, p_G, p_B);
    return result;
}
