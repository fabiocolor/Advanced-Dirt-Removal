--[[--
ShapeTest.Fuse 


--]]--

FuRegisterClass("Ex5_Shapes", CT_Tool, { -- Minimal Fu Registry class definition  
	REGS_Category      = "Fuses\\Examples",
	REGS_OpIconString  = "Shp",
	REGS_OpDescription = "Shapes Fuse",
	})

function Create()
	
	InThickness = self:AddInput("Thickness", "Thickness", {
		LINKID_DataType    = "Number",
		INPID_InputControl = "ScrewControl",
		INP_MinScale       = 0.0,
		INP_MaxScale       = 0.1,
		INP_Default        = 0.005,
		})

	InRotation = self:AddInput("Rotation", "Rotation", {
		LINKID_DataType    = "Number",
		INPID_InputControl = "ScrewControl",
		INP_MinScale       =   0.0,
		INP_MaxScale       = 100.0,
		INP_Default        =   0.0,
		})
		
		InR = self:AddInput("Red", "Red", {       -- UI Label, Internal ID
			ICS_Name            = "Color",
			LINKID_DataType     = "Number",
			INPID_InputControl  = "ColorControl", -- Type of Control
			INP_Default         = 1.0,
			INP_MaxScale        = 1.0,
			CLRC_ShowWheel      = false,
			IC_ControlGroup     = 2,              -- Groups Controls together. Make Group number 2
			IC_ControlID        = 0,              -- Red ID
			})
		InG = self:AddInput("Green", "Green", {   -- UI Label, Internal ID
			LINKID_DataType     = "Number",
			INPID_InputControl  = "ColorControl", -- Type of Control
			INP_Default         = 0.9,
			IC_ControlGroup     = 2,              -- Put this into Group number 2
			IC_ControlID        = 1,              -- Green ID
			})
		InB = self:AddInput("Blue", "Blue", {     --UI Label, Internal ID
			LINKID_DataType     = "Number",
			INPID_InputControl  = "ColorControl", -- Type of Control
			INP_Default         = 0.6,
			IC_ControlGroup     = 2,              -- Put this into Group number 2
			IC_ControlID        = 2,              -- Blue ID
			})
			
	InImage = self:AddInput("Input", "Input", {
		LINKID_DataType = "Image",
		LINK_Main       = 1,
		})

	OutImage = self:AddOutput("Output", "Output", {
		LINKID_DataType = "Image",
		LINK_Main       = 1,
		})				
end

function Process(req) 
	local img = InImage:GetValue(req)
	local out = img:CopyOf()
	
	local thickness = InThickness:GetValue(req).Value
	local rotation  = InRotation:GetValue(req).Value
	local r         = InR:GetValue(req).Value
	local g         = InG:GetValue(req).Value
	local b         = InB:GetValue(req).Value
	
	local ic  = ImageChannel(out, 8) -- Image Channel
	local fs  = FillStyle() -- Fill Style Object
	local cs  = ChannelStyle() -- Channel Style
	local mat = Matrix4() -- Matrix to transform the shapes
	
	local csrect = cs -- copy of the basic ChannelStyle
	local fsrect = fs -- copy of the basic FillStyle
	local icrect = ic 
	
	--   Shape made of a group of line segments
	local sh = Shape()
	sh:MoveTo(0.078125,      0.1484375)
	sh:LineTo(0.1748046875, -0.0078125)
	sh:LineTo(0.177734375,  -0.0732421875)
	sh:LineTo(0.1455078125, -0.1435546875)
	sh:LineTo(0.1047771518, -0.1602850781)
	sh:LineTo(0.06640625,   -0.150390625)
	sh:LineTo(0.0068359375, -0.09375)
	sh:LineTo(-0.05078125,  -0.07421875)
	sh:LineTo(-0.154296875, -0.1142578125)
	sh:LineTo(-0.176757812, -0.0986328125)
	sh:LineTo(-0.190429687,  0.0185546875)
	sh:LineTo(-0.11328125,   0.0615234375)
	sh:LineTo(-0.072265625,  0.1162109375)
	sh:LineTo(-0.0546875,    0.1025390625)
	sh:LineTo(-0.01953125,   0.1396484375)
	sh:LineTo(0.0263671875,  0.1328125)
	sh:LineTo(0.017578125,   0.1015625)
	sh:LineTo(0.0625,        0.07421875)

-- add second shape- The little forrested area down south
	sh:MoveTo(0.101649485528469, -0.175463914871216)
	sh:LineTo(0.132989693308614, -0.175876285507507)
	sh:LineTo(0.127628862857819, -0.19814433157444)
	sh:LineTo(0.115670099854469, -0.204742267727852)
	sh:LineTo(0.107961280143138, -0.197474031147269)
	sh:Close() -- Close shape to the origin point
-- end shape


	
	local sh2 = sh; sh3 = sh -- make copies of the shape

	mat:Identity()           -- Iniitalise the matrix to identity (no change)
	mat:Scale(0.7, 0.7, 0.7) -- Scale it 70%
	mat:Move(0.25, 0.4, 0)   -- Translate the shape left & upwards
	mat:RotZ(-rotation)      -- Rotate around the Z axis, Note the order of operations; Move has been applied before Rotation
	
	cs.Color = Pixel{R = r, G = g, B = b, A = 1} -- Set the Color
	ic:SetStyleFill(fs)     -- Set the Drawing application styles.
	sh = sh:TransformOfShape(mat) -- Transform Shape using the Matrix
	ic:ShapeFill(sh)        -- fill it
	ic:PutToImage("CM_Merge", cs) -- and render it 

	
	sh2 = sh2:OutlineOfShape(thickness, "OLT_Solid", "OJT_Round", 8, "SWM_Normal", 8) -- Make the shape an outline
	
	mat:Identity()
	mat:Scale(0.7, 0.7, 1.0)
	mat:RotZ(rotation)
	mat:Move(0.2, 0.15, 0)

	cs.Color = Pixel{R=r , G=g , B=b, A = 1}
	ic:SetStyleFill(fs)
	ic:ShapeFill(sh2:TransformOfShape(mat))
	ic:PutToImage("CM_Merge", cs)


	mat:Identity()
	mat:Shear(0.5, 0.0, 0.0) -- Apply Shear along X axis
	mat:Scale(0.7, 0.7, 1.0)
	mat:RotZ(rotation)
	mat:Move(0.75, 0.4, 0)
	
	
	cs.BlurType = "BT_Bartlett" -- BT_Box, BT_Bartlett, BT_MultiBox, BT_Gaussian
	cs.SoftnessX = 10.0
	cs.SoftnessY = 10.0

	ic:SetStyleFill(fs)
	ic:ShapeFill(sh2:TransformOfShape(mat))
	ic:PutToImage("CM_Merge", cs)


	mat:Identity()
	mat:Scale(0.7, 0.7, 1.0)
	mat:RotX(rotation)
	mat:Project(5) -- Set the Field of View to 5
	mat:Move(0.75, 0.15, 0)
	
	sh3 = sh3:OutlineOfShape(thickness, "OLT_Dot", "OJT_Round", 8, "SWM_Normal", 8) -- Make the shape an outline

	cs.Color         = Pixel{R = 1.0, G = 0.9, B = 0.25, A = 1}
	cs.BlurType      = "BT_Bartlett" -- BT_Box, BT_Bartlett, BT_MultiBox, BT_Gaussian
	cs.SoftnessX     = 10.0
	cs.SoftnessY     = 10.0
	cs.SoftnessGlow  = 0.95
	cs.SoftnessBlend = 0.3

	ic:SetStyleFill(fs)
	ic:ShapeFill(sh3:TransformOfShape(mat))
	ic:PutToImage("CM_Merge", cs)
	
--**************** Rectangle ************************	
	local shrect = Shape()
	shrect:AddRectangle( -0.1, 0.1, -0.1, 0.1, 0.01, 8) -- Left, Right, Top, Bottom, Corner radius, Precision
	
	mat:Identity()
	mat:Scale(1.0, 1.0, 1.0)
	mat:RotZ(rotation)
	mat:Move(0.5, 0.45, 0)

	cs.SoftnessX     = 0.0
	cs.SoftnessY     = 0.0
	cs.SoftnessGlow  = 0.0
	cs.SoftnessBlend = 1.0

	csrect.Color = Pixel{R=0.3 , G=1.0, B=0.4, A = 1}
	icrect:SetStyleFill(fsrect)
	icrect:ShapeFill(shrect:TransformOfShape(mat))
	icrect:PutToImage("CM_Merge", csrect)
--*************************************************
	
--**************** Bezier ************************	
	local shbz = Shape()
--	shbz:MoveTo( -0.053,  0.097)
	shbz:BezierTo(-0.053,  0.097,  0.000,  0.096,  0.055,  0.092)
	shbz:BezierTo( 0.113, -0.004,  0.082, -0.053,  0.057, -0.103)
	shbz:BezierTo(-0.055, -0.097, -0.080, -0.048, -0.108,  0.002)
	shbz:Close() -- Close shape to the origin point

	mat:Identity()
	mat:Scale(1.0, 1.0, 1.0)
	mat:RotZ(rotation)
	mat:Move(0.5, 0.3, 0)

	csrect.Color = Pixel{R = 0.6, G = 0.5, B = 0.4, A = 1}
	icrect:SetStyleFill(fsrect)
	icrect:ShapeFill(shbz:TransformOfShape(mat))
	icrect:PutToImage("CM_Merge", csrect)
--********************************************************

--**************** Conic ************************	
	local shcon = Shape()
--	shcon:MoveTo( -0.053,  0.097)
	shcon:ConicTo(-0.053,  0.097,  0.000,  0.096)
	shcon:ConicTo( 0.113, -0.004,  0.082, -0.053)
	shcon:ConicTo(-0.055, -0.097, -0.080, -0.048)
	shcon:Close() -- Close shape to the origin point

	mat:Identity()
	mat:Scale(1.0, 1.0, 1.0)
	mat:RotX(rotation)
	mat:Move(0.5, 0.1, 0)

	csrect.Color = Pixel{R = 0.6, G = 0.5, B = 0.9, A = 1}
	icrect:SetStyleFill(fsrect)
	icrect:ShapeFill(shcon:TransformOfShape(mat))
	icrect:PutToImage("CM_Merge", csrect)

	OutImage:Set(req, out)
end